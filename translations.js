export const translations = {
    EN: {
        welcome: "Welcome to the menu!",
        option1: "Start with faucet",
        option2: "Start without faucet",
        option3: "Full liquidity launch",
        option4: "Full swaps and conversion launch",
        option5: "Faucet only (instant launch with delay between accounts)",
        selectOption: "Select an option (1, 2, 3, 4 or 5): ",
        invalidChoice: "Invalid choice. Please enter 1, 2, 3, 4 or 5.",
        threadsPrompt: "Enter the number of threads (1–100): ",
        invalidThreads: "Invalid value. Please enter a number between 1 and 100.",
        threadsSelected: "Selected {threads} threads.",
        iterationsPrompt: "Enter the number of iterations for each account (5–25): ",
        iterationsLiquidityPrompt: "Enter the number of liquidity iterations for each account (1–100): ",
        iterationsSwapPrompt: "Enter the number of swap/conversion iterations for each account (1–100): ",
        invalidIterations: "Invalid value. Please enter a number between {min} and {max}.",
        iterationsSelected: "Selected {iterations} iterations for each account.",
        scriptStarted: "Script started, option selected: {choice}",
        faucetStarted: "Starting Pharos faucet...",
        faucetSkipped: "Faucet skipped...",
        delayMsg: "Delay: {delay} sec",
        iterationsCompleted: "All {total} successful iterations completed.",
        liquidityCompleted: "Liquidity completed for all accounts",
        swapsCompleted: "Full swaps and conversion completed for all accounts",
        faucetCompleted: "Faucet completed for all accounts",
        waitingRestart: "Waiting {hours} hours...",
        successfulWallets: "Successful wallets:",
        errorPrivs: "Error: privs is empty or not loaded. Check file {file}",
        providerCreationFailed: "Failed to create provider after {retries} attempts: {error}",
        providerRetry: "Retrying provider creation (attempt {retry}/{maxRetries})...",
        balancePhrs: "PHRS balance: {balance}",
        lowGasBalance: "PHRS balance too low ({balance}) for gas, wallet disabled",
        lowGasBalanceLog: "Wallet with low balance disabled: {address}",
        warnGasBalance: "PHRS balance < 0.05 ({balance}), unwrapping WPHRS...",
        balanceWphrs: "WPHRS balance: {balance}",
        insufficientWphrs: "Insufficient WPHRS for exchange ({balance})",
        noWphrsExchange: "Wallet without WPHRS for exchange: {address}",
        insufficientWphrsUnwrap: "Insufficient WPHRS for unwrap ({balance} < {amount})",
        wphrsUnwrapError: "Unwrap error: insufficient WPHRS for {address}",
        insufficientGas: "Insufficient PHRS for gas ({balance} < {gas})",
        unwrapTxSent: "Unwrap transaction sent: {hash}",
        unwrapSuccess: "Unwrap successful: {hash}",
        unwrapRetry: "Unwrap retry after {delay} seconds: {error}",
        unwrapError: "Unwrap error: {error}",
        unwrapFailed: "Failed to unwrap WPHRS after 3 attempts: {error}",
        unwrapFailedLog: "Wallet failed to unwrap WPHRS: {address}",
        error429: "Error 429, attempt {attempt}/{maxAttempts}: {message}",
        retryWait: "Waiting {delay} minutes before retry",
        allAttemptsExhausted: "All attempts exhausted ({maxAttempts})",
        allAttemptsExhaustedLog: "All attempts exhausted with error: {message}",
        generalError: "General error: {message}",
        generalErrorLog: "General error: {message}",
        initScript: "Script started, environment check...",
        languageSelected: "Language selected: {lang}",
        menuDisplay: "Menu displayed",
        scriptCompleted: "Script execution completed.",
        transactionSent: "Transaction sent: {hash}",
        transactionFailed: "Transaction failed: {hash}",
        transactionSuccess: "Transaction successful: {hash}",
        retryAttempt: "Retry attempt after {delay} seconds: {message}",
        poolNotInitialized: "Pool not initialized, calculating initialSqrtPriceX96...",
        poolInitialized: "Pool initialized",
        swapError: "Swap error: {message}",
        swapErrorLog: "Swap error logged: {message}",
        liquidityAdded: "Liquidity successfully added: {hash}",
        conversionStarted: "Starting USDC/USDT conversion...",
        conversionCompleted: "USDC/USDT conversion completed",
        insufficientBalance: "Insufficient balance for swap: {balance} < {amount}",
        invalidAddress: "Invalid {name} address: {addr}",
        noTokensForSwap: "No available tokens for swap, skipping...",
        zeroAmount: "Zero amount, skipping...",
        unwrapTriggered: "Unwrap triggered for WPHRS",
        globalUnhandledRejection: "Unhandled Rejection: {reason}",
        globalUncaughtException: "Uncaught Exception: {err}",
        approvingToken: "Approving {symbol} for {spender} with amount {amount}",
        tokenApproved: "{symbol} approved successfully: {hash}",
        tokenAlreadyApproved: "{symbol} already approved",
        tokenRetryApproved: "{symbol} retry approved: {hash}",
        maxRetriesExceeded: "Max retries ({retries}) exceeded",
        approvalError: "Approval error for {symbol}: {message}",
        balanceCheck: "Balance check for {token}: {balance}",
        insufficientBalanceLog: "Insufficient {token} balance: {balance}",
        sameTokenError: "Cannot swap the same token",
        gasEstimateError: "Error estimating gas",
        swappingUsdcToWphrs: "Swapping {amount} USDC to WPHRS",
        swappingPhrs: "Swapping PHRS to {wphrs} WPHRS and {usdc} USDC",
        insufficientPhrs: "Insufficient PHRS for swap: {balance}",
        noPhrsForSwap: "No PHRS available for swap",
        insufficientLiquidity: "Insufficient liquidity: WPHRS={wphrs}, USDC={usdc}",
        amountsReordered: "Amounts reordered: {amount0} {symbol0}, {amount1} {symbol1}",
        tokenOrderError: "WPHRS must be token0, but address order is incorrect!",
        successfulWalletSwap: "Successful swap for wallet {address}: {hash}",
        successfulWalletLiquidity: "Successful liquidity addition for wallet {address}: {hash}",
        successfulWalletLiquidityRetry: "Successful liquidity retry for wallet {address}: {hash}",
        successfulWalletConvert: "Successful conversion for wallet {address}",
        successfulWalletUnwrap: "Successful unwrap for wallet {address}: {hash}",
        liquidityError: "Liquidity error: {message}",
        retryFailed: "Retry failed: {message}",
        retryError: "Retry error: {message}",
        replayAttackDetected: "Replay attack detected, retrying...",
        noConversionNeeded: "No conversion needed",
        balanceCheckUsdcUsdt: "USDC balance: {usdc}, USDT balance: {usdt}",
        conversionDirection: "Converting {from} to {to}",
        conversionAmount: "Converting {amount} {symbol}",
        actionSelected: "Selected action: {action} (Total: {total}, Completed: {completed}, Liquidity: {liquidity}, Swaps: {swaps})",
        liquiditySuccess: "Liquidity added (Completed: {completed}/{total})",
        conversionSuccess: "Conversion successful (Completed: {completed}/{total})",
        swapSuccess: "Swap {from} → {to} successful (Completed: {completed}/{total})",
        iterationError: "Iteration error: {message}",
        swapPhrsError: "Swap PHRS error for {address}: {message}",
        sigintInterrupt: "Script interrupted by SIGINT",
        providerInitialized: "Provider initialized",
        providerNotInitialized: "Provider not initialized",
        walletDisabled: "Wallet disabled: {address}",
        faucetCooldown: "Faucet on cooldown",
        faucetSuccess: "Faucet success",
        liquidityFailed: "Liquidity transaction failed: {hash}",
        poolInitFailed: "Pool initialization failed: {hash}",
        transactionRejection: "Transaction rejected: {hash}",
        approvalRejection: "Approval transaction rejected: {hash}",
        swapImpossible: "Error: fromToken and toToken are the same, swap impossible",
        insufficientBalanceError: "Insufficient balance {token}: {balance} < {amount}",
        invalidSwapRouter: "Invalid SWAP_ROUTER_ADDRESS: {addr}",
        gasEstimationError: "Gas estimation error, using default gasLimit",
        swapTransactionSent: "Swap transaction sent: {hash}",
        swapSuccessMsg: "Swap successful: {hash}",
        liquidityTransactionSent: "Liquidity transaction sent: {hash}",
        liquiditySuccessMsg: "Liquidity successfully added: {hash}",
        retryLiquidityMsg: "Liquidity added after retry: {hash}",
        replayAttackMsg: "Detected TX_REPLAY_ATTACK, retrying...",
        insufficientTokensMsg: "Insufficient tokens for liquidity: WPHRS={wphrs}, USDC={usdc}",
        noPhrsMsg: "No PHRS for swap and tokens insufficient",
        orderErrorMsg: "WPHRS must be token0, but address order is incorrect!",
        // Added missing keys
        transactionTimeout: "Transaction timed out",
        transactionTimeoutLog: "Transaction {hash} timed out",
		liquidityTransactionSent: "Liquidity transaction sent: {hash}",
        liquiditySuccessMsg: "Liquidity successfully added: {hash}",
        liquidityError: "Liquidity error: {message}",
        replayAttackMsg: "Detected TX_REPLAY_ATTACK, retrying...",
        retryLiquidityMsg: "Liquidity added after retry: {hash}",
        retryError: "Retry error: {message}",
		insufficientLiquidity: "Insufficient liquidity: WPHRS={wphrs}, USDC={usdc}",
        insufficientBalance: "Insufficient balance: {balance} < {amount}",
        walletCompleted: "Wallet completed: {address}",
        unwrapFailedTx: "Unwrap transaction failed: {hash}"
    },
    RU: {
        welcome: "Добро пожаловать в меню!",
        option1: "Запустить с фаусетом",
        option2: "Запустить без фаусета",
        option3: "Полноценный запуск ликвидности",
        option4: "Полноценный запуск свопов и конвертации",
        option5: "Только фаусет (мгновенный запуск с задержкой между акками)",
        selectOption: "Выберите опцию (1, 2, 3, 4 или 5): ",
        invalidChoice: "Неверный выбор. Введите 1, 2, 3, 4 или 5.",
        threadsPrompt: "Введите количество потоков (1–100): ",
        invalidThreads: "Неверное значение. Введите число от 1 до 100.",
        threadsSelected: "Выбрано {threads} потоков.",
        iterationsPrompt: "Введите количество итераций для каждого аккаунта (5–25): ",
        iterationsLiquidityPrompt: "Введите количество итераций ликвидности для каждого аккаунта (1–100): ",
        iterationsSwapPrompt: "Введите количество итераций свопов/конвертации для каждого аккаунта (1–100): ",
        invalidIterations: "Неверное значение. Введите число от {min} до {max}.",
        iterationsSelected: "Выбрано {iterations} итераций для каждого аккаунта.",
        scriptStarted: "Скрипт запущен, выбор опции: {choice}",
        faucetStarted: "Запуск фаусета Pharos...",
        faucetSkipped: "Фаусет пропущен...",
        delayMsg: "Задержка: {delay} сек",
        iterationsCompleted: "Все {total} успешные итерации завершены.",
        liquidityCompleted: "Ликвидность добавлена",
        swapsCompleted: "Полноценные свопы и конвертация завершены для всех аккаунтов",
        faucetCompleted: "Фаусет завершен для всех аккаунтов",
        waitingRestart: "Ожидание {hours} часов...",
        successfulWallets: "Успешные кошельки:",
        errorPrivs: "Ошибка: privs пустой или не загружен. Проверьте файл {file}",
        providerCreationFailed: "Не удалось создать провайдера после {retries} попыток: {error}",
        providerRetry: "Повторная попытка создания провайдера (попытка {retry}/{maxRetries})...",
        balancePhrs: "Баланс PHRS: {balance}",
        lowGasBalance: "Баланс PHRS слишком низкий ({balance}) для оплаты газа, кошелек отключён",
        lowGasBalanceLog: "Кошелек с низким балансом отключён: {address}",
        warnGasBalance: "Баланс PHRS < 0.05 ({balance}), развёртывание WPHRS...",
        balanceWphrs: "Баланс WPHRS: {balance}",
        insufficientWphrs: "Недостаточно WPHRS для обмена ({balance})",
        noWphrsExchange: "Кошелек без WPHRS для обмена: {address}",
        insufficientWphrsUnwrap: "Недостаточно WPHRS для развёртывания ({balance} < {amount})",
        wphrsUnwrapError: "Ошибка развёртывания: недостаток WPHRS для {address}",
        insufficientGas: "Недостаточно PHRS для оплаты газа ({balance} < {gas})",
        unwrapTxSent: "Транзакция развёртывания отправлена: {hash}",
        unwrapSuccess: "Развёртывание успешно: {hash}",
        unwrapRetry: "Повторная попытка развёртывания через {delay} секунд: {error}",
        unwrapError: "Ошибка развёртывания: {error}",
        unwrapFailed: "Не удалось развёрнуть WPHRS после 3 попыток: {error}",
        unwrapFailedLog: "Кошелек не смог развёрнуть WPHRS: {address}",
        error429: "Ошибка 429, попытка {attempt}/{maxAttempts}: {message}",
        retryWait: "Ожидание {delay} минут перед повторной попыткой",
        allAttemptsExhausted: "Все попытки исчерпаны ({maxAttempts})",
        allAttemptsExhaustedLog: "Все попытки исчерпаны с ошибкой: {message}",
        generalError: "Общая ошибка: {message}",
        generalErrorLog: "Общая ошибка: {message}",
        initScript: "Скрипт запущен, проверка окружения...",
        languageSelected: "Язык выбран: {lang}",
        menuDisplay: "Меню отображено",
        scriptCompleted: "Выполнение скрипта завершено.",
        transactionSent: "Транзакция отправлена: {hash}",
        transactionFailed: "Транзакция провалилась: {hash}",
        transactionSuccess: "Транзакция успешна: {hash}",
        retryAttempt: "Повторная попытка через {delay} секунд: {message}",
        poolNotInitialized: "Пул не инициализирован, вычисляем initialSqrtPriceX96...",
        poolInitialized: "Пул инициализирован",
        swapError: "Ошибка свопа: {message}",
        swapErrorLog: "Ошибка свопа записана: {message}",
        liquidityAdded: "Ликвидность успешно добавлена: {hash}",
        conversionStarted: "Начало конвертации USDC/USDT...",
        conversionCompleted: "Конвертация USDC/USDT завершена",
        insufficientBalance: "Недостаточно баланса для свопа: {balance} < {amount}",
        invalidAddress: "Недействительный адрес {name}: {addr}",
        noTokensForSwap: "Нет доступных токенов для свопа, пропуск...",
        zeroAmount: "Нулевая сумма, пропуск...",
        unwrapTriggered: "Запущено развёртывание WPHRS",
        globalUnhandledRejection: "Необработанное исключение: {reason}",
        globalUncaughtException: "Необработанное исключение: {err}",
        approvingToken: "Одобрение {symbol} для {spender} с суммой {amount}",
        tokenApproved: "{symbol} успешно одобрен: {hash}",
        tokenAlreadyApproved: "{symbol} уже одобрен",
        tokenRetryApproved: "{symbol} повторно одобрен: {hash}",
        maxRetriesExceeded: "Превышено максимальное количество попыток ({retries})",
        approvalError: "Ошибка одобрения для {symbol}: {message}",
        balanceCheck: "Проверка баланса для {token}: {balance}",
        insufficientBalanceLog: "Недостаточный баланс {token}: {balance}",
        sameTokenError: "Нельзя свапить один и тот же токен",
        gasEstimateError: "Ошибка оценки газа, используется дефолтный gasLimit",
        swappingUsdcToWphrs: "Свап {amount} USDC в WPHRS",
        swappingPhrs: "Свап PHRS в {wphrs} WPHRS и {usdc} USDC",
        insufficientPhrs: "Недостаточно PHRS для свапа: {balance}",
        noPhrsForSwap: "Нет PHRS для свапа",
        insufficientLiquidity: "Недостаточно ликвидности: WPHRS={wphrs}, USDC={usdc}",
        amountsReordered: "Суммы переупорядочены: {amount0} {symbol0}, {amount1} {symbol1}",
        tokenOrderError: "WPHRS должен быть token0, но порядок адресов некорректен!",
        successfulWalletSwap: "Успешный свап для кошелька {address}: {hash}",
        successfulWalletLiquidity: "Успешное добавление ликвидности для кошелька {address}: {hash}",
        successfulWalletLiquidityRetry: "Успешная повторная ликвидность для кошелька {address}: {hash}",
        successfulWalletConvert: "Успешная конвертация для кошелька {address}",
        successfulWalletUnwrap: "Успешное развёртывание для кошелька {address}: {hash}",
        liquidityError: "Ошибка ликвидности: {message}",
        retryFailed: "Повторная попытка провалилась: {message}",
        retryError: "Ошибка повторной попытки: {message}",
        replayAttackDetected: "Обнаружена атака воспроизведения, повторная попытка...",
        noConversionNeeded: "Конвертация не требуется",
        balanceCheckUsdcUsdt: "Баланс USDC: {usdc}, баланс USDT: {usdt}",
        conversionDirection: "Конвертация {from} в {to}",
        conversionAmount: "Конвертация {amount} {symbol}",
        actionSelected: "Выбранное действие: {action} (Всего: {total}, Выполнено: {completed}, Ликвидность: {liquidity}, Свопы: {swaps})",
        liquiditySuccess: "Ликвидность добавлена (Выполнено: {completed}/{total})",
        conversionSuccess: "Конвертация успешна (Выполнено: {completed}/{total})",
        swapSuccess: "Своп {from} → {to} успешен (Выполнено: {completed}/{total})",
        iterationError: "Ошибка итерации: {message}",
        swapPhrsError: "Ошибка свапа PHRS для {address}: {message}",
        sigintInterrupt: "Скрипт прерван сигналом SIGINT",
        providerInitialized: "Провайдер инициализирован",
        providerNotInitialized: "Провайдер не инициализирован",
        walletDisabled: "Кошелек отключён: {address}",
        faucetCooldown: "Фаусет в режиме ожидания",
        faucetSuccess: "Успешный запуск фаусета",
        liquidityFailed: "Транзакция добавления ликвидности провалилась: {hash}",
        poolInitFailed: "Ошибка инициализации пула: {hash}",
        transactionRejection: "Транзакция отклонена: {hash}",
        approvalRejection: "Транзакция одобрения отклонена: {hash}",
        swapImpossible: "Ошибка: fromToken и toToken одинаковы, своп невозможен",
        insufficientBalanceError: "Недостаточно баланса {token}: {balance} < {amount}",
        invalidSwapRouter: "Некорректный адрес SWAP_ROUTER_ADDRESS: {addr}",
        gasEstimationError: "Ошибка оценки газа, используется дефолтный gasLimit",
        swapTransactionSent: "Транзакция свопа отправлена: {hash}",
        swapSuccessMsg: "Своп успешен: {hash}",
        liquidityTransactionSent: "Транзакция добавления ликвидности отправлена: {hash}",
        liquiditySuccessMsg: "Ликвидность успешно добавлена: {hash}",
        retryLiquidityMsg: "Ликвидность добавлена после повторной попытки: {hash}",
        replayAttackMsg: "Обнаружена TX_REPLAY_ATTACK, повторная попытка...",
        insufficientTokensMsg: "Недостаточно токенов для ликвидности: WPHRS={wphrs}, USDC={usdc}",
        noPhrsMsg: "Нет PHRS для свопа и токены недостаточны",
        orderErrorMsg: "WPHRS должен быть token0, но порядок адресов некорректен!",
        // Added missing keys
        transactionTimeout: "Transaction timed out",
        transactionTimeoutLog: "Transaction {hash} timed out",
		liquidityTransactionSent: "Транзакция добавления ликвидности отправлена: {hash}",
        liquiditySuccessMsg: "Ликвидность успешно добавлена: {hash}",
        liquidityError: "Ошибка при добавлении ликвидности: {message}",
        replayAttackMsg: "Обнаружена TX_REPLAY_ATTACK, повторная попытка...",
        retryLiquidityMsg: "Ликвидность добавлена после повторной попытки: {hash}",
        retryError: "Ошибка повторной попытки ликвидности: {message}",
		 insufficientLiquidity: "Недостаточно ликвидности: WPHRS={wphrs}, USDC={usdc}",
        insufficientBalance: "Недостаточно баланса: {balance} < {amount}",
        walletCompleted: "Кошелек завершён: {address}",
        unwrapFailedTx: "Транзакция развёртывания провалилась: {hash}"
    }
};